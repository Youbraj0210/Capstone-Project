// <auto-generated />
using System;
using BankingPaymentsApp_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingPaymentsApp_API.Migrations
{
    [DbContext(typeof(BankingPaymentsDBContext))]
    [Migration("20250914133351_updated transaction")]
    partial class updatedtransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.AccountStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("AccountStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Status = 0
                        },
                        new
                        {
                            StatusId = 2,
                            Status = 1
                        },
                        new
                        {
                            StatusId = 3,
                            Status = 2
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.AccountType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Type = 0
                        },
                        new
                        {
                            TypeId = 2,
                            Type = 1
                        },
                        new
                        {
                            TypeId = 3,
                            Type = 2
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Beneficiary", b =>
                {
                    b.Property<int>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeneficiaryId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProofTypeId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("ProofTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayeeAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PayerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PayeeAccountId");

                    b.HasIndex("PayerAccountId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.PaymentStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Status = 0
                        },
                        new
                        {
                            StatusId = 2,
                            Status = 1
                        },
                        new
                        {
                            StatusId = 3,
                            Status = 2
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.ProofType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.ToTable("ProofTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Type = 0
                        },
                        new
                        {
                            TypeId = 2,
                            Type = 1
                        },
                        new
                        {
                            TypeId = 3,
                            Type = 2
                        },
                        new
                        {
                            TypeId = 4,
                            Type = 3
                        },
                        new
                        {
                            TypeId = 5,
                            Type = 4
                        },
                        new
                        {
                            TypeId = 6,
                            Type = 5
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.TransactionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Type = 0
                        },
                        new
                        {
                            TypeId = 2,
                            Type = 1
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserJoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Role = 0
                        },
                        new
                        {
                            RoleId = 2,
                            Role = 1
                        },
                        new
                        {
                            RoleId = 3,
                            Role = 2
                        });
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.BankUser", b =>
                {
                    b.HasBaseType("BankingPaymentsApp_API.Models.User");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefferalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BankUser");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.ClientUser", b =>
                {
                    b.HasBaseType("BankingPaymentsApp_API.Models.User");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KycVierified")
                        .HasColumnType("bit");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue("ClientUser");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Account", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.AccountStatus", "AccountStatus")
                        .WithMany()
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.ClientUser", "ClientUser")
                        .WithOne()
                        .HasForeignKey("BankingPaymentsApp_API.Models.Account", "ClientId");

                    b.Navigation("AccountStatus");

                    b.Navigation("AccountType");

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Document", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.ProofType", "ProofType")
                        .WithMany()
                        .HasForeignKey("ProofTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProofType");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Employee", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.ClientUser", "ClientUser")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Payment", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.Account", "PayeeAccount")
                        .WithMany()
                        .HasForeignKey("PayeeAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.Account", "PayerAccount")
                        .WithMany()
                        .HasForeignKey("PayerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayeeAccount");

                    b.Navigation("PayerAccount");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.Transaction", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingPaymentsApp_API.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Payment");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.User", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankingPaymentsApp_API.Models.ClientUser", b =>
                {
                    b.HasOne("BankingPaymentsApp_API.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
